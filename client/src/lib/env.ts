// Generated by Copilot
import { clientEnvSchema } from "@shared/schema";
import { z } from "zod";

/**
 * Client environment variables utility
 */
export class ClientEnv {
  private static _instance: ClientEnv;
  private _env: Record<string, string | undefined>;
  private _validationResult: z.SafeParseReturnType<any, any>;

  private constructor() {
    this._env = import.meta.env || {};
    this._validationResult = clientEnvSchema.safeParse(this._env);
    
    if (!this._validationResult.success) {
      console.warn("❌ Client environment validation failed:", 
        this._validationResult.error.format());
    }
    
    if (!this._env.VITE_STRIPE_PUBLIC_KEY) {
      console.warn("⚠️ Missing environment variable: VITE_STRIPE_PUBLIC_KEY. Stripe payment functionality will be disabled.");
    }
  }

  public static getInstance(): ClientEnv {
    if (!ClientEnv._instance) {
      ClientEnv._instance = new ClientEnv();
    }
    return ClientEnv._instance;
  }

  public get<T>(key: string, fallback?: T): T | undefined {
    return (this._env[key] as unknown as T) || fallback;
  }

  public isStripeAvailable(): boolean {
    return !!this._env.VITE_STRIPE_PUBLIC_KEY;
  }

  public getStripeKey(): string | undefined {
    return this._env.VITE_STRIPE_PUBLIC_KEY;
  }

  public isValid(): boolean {
    return this._validationResult.success;
  }
}

export const clientEnv = ClientEnv.getInstance();